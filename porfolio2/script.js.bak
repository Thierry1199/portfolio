document.addEventListener('DOMContentLoaded', () => {
    // Utility function to safely select elements (prevents null errors)
    const safeSelect = (selector, parent = document) => parent.querySelector(selector);
    const safeSelectAll = (selector, parent = document) => parent.querySelectorAll(selector);

    // ----- HEADER & NAVIGATION -----
    const header = safeSelect('.header');
    const navLinks = safeSelectAll('.nav__link');

    if (header) {
    window.addEventListener('scroll', () => {
            if (window.scrollY > 50) {
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        });
    }

    if (navLinks.length) {
        navLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                const href = this.getAttribute('href');
                if (href.startsWith('#')) {
                    e.preventDefault();
                    const targetId = href.substring(1);
                    const targetElement = safeSelect(`#${targetId}`);
                    
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 100,
                            behavior: 'smooth'
                        });
                    }
                }
            });
        });
    }

    // ----- ABOUT SECTION -----
    const aboutSection = safeSelect('#about');
    const navButtons = safeSelectAll('.nav-button');
    const contentSections = safeSelectAll('.content-section');
    
    if (aboutSection && navButtons.length) {
        // Intersection Observer for about section
    const aboutObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
                if (entry.isIntersecting && navButtons.length) {
                // Animate nav buttons when about section is visible
                navButtons.forEach((button, index) => {
                        if (typeof gsap !== 'undefined') {
                    gsap.fromTo(button, 
                        {
                            opacity: 0,
                            x: -20
                        },
                        {
                            opacity: 1,
                            x: 0,
                            duration: 0.5,
                            delay: index * 0.2,
                            ease: "power2.out"
                        }
                    );
                        } else {
                            // Fallback if GSAP isn't loaded
                            button.style.opacity = 1;
                            button.style.transform = 'translateX(0)';
                        }
                });
            }
        });
        }, { threshold: 0.3 });

        aboutObserver.observe(aboutSection);

        // Tab switching functionality
    navButtons.forEach(button => {
        button.addEventListener('click', () => {
                const targetSection = button.getAttribute('data-section');
                
                // Update active button
            navButtons.forEach(btn => btn.classList.remove('active'));
            button.classList.add('active');
            
                // Switch content sections
                contentSections.forEach(section => {
                section.classList.remove('active');
                    if (section.getAttribute('data-content') === targetSection) {
                    section.classList.add('active');
                }
            });
        });
    });
    }

    // ----- PROJECTS SECTION -----
    const projectSection = safeSelect('#projects');
    const projectFolders = safeSelectAll('.project-folder');

    if (projectSection && projectFolders.length) {
        // VERBETERDE ANIMATIE OP SCROLL - Geen donkere projecten meer
        const folderObserver = new IntersectionObserver((entries) => {
            entries.forEach((entry, index) => {
                if (entry.isIntersecting && typeof gsap !== 'undefined') {
                    // Verwijder opacity animatie - alleen positie animatie
                    gsap.from(entry.target, {
                        y: 30,                    // Minder beweging
                        duration: 0.6,            // Snellere animatie
                        delay: index * 0.08,      // Minder vertraging
                        ease: 'power2.out',
                        clearProps: 'opacity'     // Belangrijk: zorgt dat opacity niet verandert
                    });
                    
                    // Zorg ervoor dat alle projecten standaard volledig zichtbaar zijn
                    gsap.set(entry.target, {
                        opacity: 1,
                        clearProps: 'filter,brightness'
                    });
                }
            });
        }, {
            threshold: 0.1,
            rootMargin: "-10px"
        });

        // Setup folder interactions
        projectFolders.forEach(folder => {
            // Zet folder meteen op zichtbaar
            folder.style.opacity = 1;
            
            // Add to observer
            folderObserver.observe(folder);
            
            // Get folder elements
            const folderTab = safeSelect('.folder-tab', folder);
            const viewIcon = safeSelect('.folder-icon--view', folder);
            const closeIcon = safeSelect('.folder-icon--close', folder);
            const folderPreview = safeSelect('.folder-preview', folder);
            const folderContent = safeSelect('.folder-content', folder);
            
            if (folderTab) {
                folderTab.addEventListener('click', () => {
                    // Close all other folders
                    projectFolders.forEach(otherFolder => {
                        if (otherFolder !== folder && otherFolder.classList.contains('active')) {
                            otherFolder.classList.remove('active');
                            // Reset other folder content positions
                            const otherContent = safeSelect('.folder-content', otherFolder);
                            if (otherContent && typeof gsap !== 'undefined') {
                                gsap.set(otherContent, { y: '100%' });
                            } else if (otherContent) {
                                otherContent.style.transform = 'translateY(100%)';
                            }
                        }
                    });
                    
                    // Toggle current folder
                    folder.classList.toggle('active');
                    
                    if (folder.classList.contains('active') && typeof gsap !== 'undefined') {
                        // Animate folder content
                        const folderDetails = safeSelectAll('.folder-details > *', folder);
                        
                        if (folderContent && folderDetails.length > 0) {
                            gsap.fromTo(folderContent,
                                { y: '100%' },
                                { y: '0%', duration: 0.4, ease: 'power2.out' }
                            );
                            
                            gsap.fromTo(folderDetails, 
                                { y: 20, opacity: 0 },
                                { 
                                    y: 0, 
                                    opacity: 1, 
                                    duration: 0.4, 
                                    stagger: 0.07,
                                    delay: 0.1,
                                    ease: 'power2.out'
                                }
                            );
                            
                            // Optioneel: Vervaag de preview een beetje
                            if (folderPreview) {
                                gsap.to(folderPreview, {
                                    opacity: 0.7,
                                    duration: 0.3
                                });
                            }
                        }
                    } else {
                        // Sluit de folder en reset de preview
                        closeFolder(folder);
                    }
                });
            }
            
            if (viewIcon) {
                viewIcon.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (folderTab && !folder.classList.contains('active')) {
                        folderTab.click();
                    }
                });
            }
            
            if (closeIcon) {
                closeIcon.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (folder.classList.contains('active')) {
                        closeFolder(folder);
                        folder.classList.remove('active');
                    }
                });
            }
            
            // Functie om folder te sluiten en afbeelding weer zichtbaar te maken
            function closeFolder(folderElement) {
                const preview = safeSelect('.folder-preview', folderElement);
                const content = safeSelect('.folder-content', folderElement);
                
                // Verwijder active class
                folderElement.classList.remove('active');
                
                // Reset content positie
                if (content && typeof gsap !== 'undefined') {
                    gsap.to(content, {
                        y: '100%',
                        duration: 0.3,
                        ease: 'power2.in'
                    });
                    
                    // Maak preview weer volledig zichtbaar
                    if (preview) {
                        gsap.to(preview, {
                            opacity: 1,
                            duration: 0.3
                        });
                    }
                } else if (content) {
                    // Fallback zonder GSAP
                    content.style.transform = 'translateY(100%)';
                    if (preview) preview.style.opacity = 1;
                }
            }
        });
    }

    // ----- HOBBY SLIDER -----
    initializeHobbySlider();

    // ----- SCROLL ANIMATIONS -----
    initializeScrollAnimations();

    // Project details toggle - Eenvoudige en lichte implementatie
    const infoButtons = document.querySelectorAll('.info-toggle');
    
    if (infoButtons.length) {
        infoButtons.forEach(button => {
            button.addEventListener('click', () => {
                const projectItem = button.closest('.project-item');
                
                // Toggle show-details class
                projectItem.classList.toggle('show-details');
                
                // Change button icon
                const icon = button.querySelector('i');
                if (projectItem.classList.contains('show-details')) {
                    icon.classList.remove('fa-info-circle');
                    icon.classList.add('fa-times-circle');
                } else {
                    icon.classList.remove('fa-times-circle');
                    icon.classList.add('fa-info-circle');
                }
            });
        });
    }
    
    // Smooth entrance animation for projects
    const projectItems = document.querySelectorAll('.project-item');
    if (projectItems.length) {
        // Initial state - hide all projects
        projectItems.forEach(item => {
            item.style.opacity = "0";
            item.style.transform = "translateY(30px)";
        });
        
        // Simple intersection observer with minimal animations
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    // Simple fade in animation
                    entry.target.style.transition = "opacity 0.6s ease, transform 0.6s ease";
                    entry.target.style.opacity = "1";
                    entry.target.style.transform = "translateY(0)";
                    
                    // Stop observing after animation
                    observer.unobserve(entry.target);
                }
            });
        }, { threshold: 0.1 });
        
        // Observe each project item
        projectItems.forEach(item => {
            observer.observe(item);
        });
    }
});

// Create and initialize the orbit navigation system
function createOrbitNavigation(slider, slides, currentIndex) {
    // Remove old navigation if exists
    const oldNav = slider.querySelector('.orbit-navigation');
    if (oldNav) oldNav.remove();
    
    // Create the orbit navigation container
    const orbitNav = document.createElement('div');
    orbitNav.className = 'orbit-navigation';    
    
    // Create galaxy backdrop with stars
    const galaxyBackdrop = document.createElement('div');
    galaxyBackdrop.className = 'galaxy-backdrop';
    
    // Add stars to galaxy backdrop
    for (let i = 0; i < 20; i++) {
        const star = document.createElement('div');
        star.className = 'star';
        star.style.top = `${Math.random() * 100}%`;
        star.style.left = `${Math.random() * 100}%`;
        star.style.animationDelay = `${Math.random() * 4}s`;
        galaxyBackdrop.appendChild(star);
    }
    
    orbitNav.appendChild(galaxyBackdrop);
    
    // Create track
    const track = document.createElement('div');
    track.className = 'orbit-track';
    
    // Create progress indicator
    const progress = document.createElement('div');
    progress.className = 'orbit-progress';
    track.appendChild(progress);
    
    // Create planets container
    const planetsContainer = document.createElement('div');
    planetsContainer.className = 'orbit-planets';
    
    // Create spacecraft
    const spacecraft = document.createElement('div');
    spacecraft.className = 'orbit-spacecraft';
    spacecraft.innerHTML = `
        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M12,0 C10.34,0 9,1.34 9,3 C9,4.66 10.34,6 12,6 C13.66,6 15,4.66 15,3 C15,1.34 13.66,0 12,0 Z M12,9 C7.03,9 3,13.03 3,18 L3,24 L21,24 L21,18 C21,13.03 16.97,9 12,9 Z"></path>
        </svg>
    `;
    
    // Add planets for each slide
    slides.forEach((slide, index) => {
        const planet = document.createElement('div');
        planet.className = 'orbit-planet';
        if (index === currentIndex) planet.classList.add('active');
        
        // Extract title from slide
        const slideTitle = slide.querySelector('h3')?.textContent || `Slide ${index + 1}`;
        
        // Add title to planet
        const title = document.createElement('span');
        title.className = 'orbit-title';
        title.textContent = slideTitle;
        planet.appendChild(title);
        
        // Add click event
        planet.addEventListener('click', () => {
            // Update active planet
            const planets = planetsContainer.querySelectorAll('.orbit-planet');
            planets.forEach(p => p.classList.remove('active'));
            planet.classList.add('active');
            
            // Calculate progress
            const progressPercent = (index / (slides.length - 1)) * 100;
            progress.style.width = `${progressPercent}%`;
            
            // Move spacecraft
            const planetPosition = index / (slides.length - 1);
            spacecraft.style.left = `${planetPosition * 100}%`;
            
            // Show the corresponding slide
            showSlide(index);
        });
        
        planetsContainer.appendChild(planet);
    });
    
    // Add elements to DOM
    track.appendChild(planetsContainer);
    track.appendChild(spacecraft);
    orbitNav.appendChild(track);
    
    // Add orbit navigation after the content
    const firstSlideContainer = slider.querySelector('.hobby-slide-container');
    if (firstSlideContainer) {
        firstSlideContainer.appendChild(orbitNav);
    } else {
        slider.appendChild(orbitNav);
    }
    
    // Set initial state
    progress.style.width = `${(currentIndex / (slides.length - 1)) * 100}%`;
    spacecraft.style.left = `${(currentIndex / (slides.length - 1)) * 100}%`;
    
    // Make spacecraft draggable
    let isDragging = false;
    let startX, startLeft;
    
    spacecraft.addEventListener('mousedown', e => {
        isDragging = true;
        startX = e.clientX;
        startLeft = parseFloat(spacecraft.style.left) || 0;
        spacecraft.style.cursor = 'grabbing';
    });
    
    document.addEventListener('mousemove', e => {
        if (!isDragging) return;
        
        const trackWidth = track.offsetWidth;
        const delta = e.clientX - startX;
        const percentDelta = (delta / trackWidth) * 100;
        let newLeft = startLeft + percentDelta;
        
        // Clamp to track bounds
        newLeft = Math.max(0, Math.min(100, newLeft));
        
        // Update spacecraft position
        spacecraft.style.left = `${newLeft}%`;
        
        // Update progress
        progress.style.width = `${newLeft}%`;
        
        // Calculate nearest planet
        const planetIndex = Math.round(newLeft / (100 / (slides.length - 1)));
        
        // Highlight active planet
        const planets = planetsContainer.querySelectorAll('.orbit-planet');
        planets.forEach((p, i) => {
            p.classList.toggle('active', i === planetIndex);
        });
        
        // Show the corresponding slide
        showSlide(planetIndex);
    });
    
    document.addEventListener('mouseup', () => {
        if (isDragging) {
            isDragging = false;
            spacecraft.style.cursor = 'pointer';
            
            // Snap to nearest planet
            const currentLeft = parseFloat(spacecraft.style.left) || 0;
            const planetIndex = Math.round(currentLeft / (100 / (slides.length - 1)));
            const snapLeft = (planetIndex / (slides.length - 1)) * 100;
            
            // Animate to snap position
            spacecraft.style.transition = 'left 0.3s ease';
            spacecraft.style.left = `${snapLeft}%`;
            progress.style.width = `${snapLeft}%`;
            
            // Reset transition after animation
            setTimeout(() => {
                spacecraft.style.transition = '';
            }, 300);
        }
    });
    
    // Add touch events for mobile
    spacecraft.addEventListener('touchstart', e => {
        isDragging = true;
        startX = e.touches[0].clientX;
        startLeft = parseFloat(spacecraft.style.left) || 0;
    });
    
    document.addEventListener('touchmove', e => {
        if (!isDragging) return;
        
        const trackWidth = track.offsetWidth;
        const delta = e.touches[0].clientX - startX;
        const percentDelta = (delta / trackWidth) * 100;
        let newLeft = startLeft + percentDelta;
        
        // Clamp to track bounds
        newLeft = Math.max(0, Math.min(100, newLeft));
        
        // Update spacecraft position
        spacecraft.style.left = `${newLeft}%`;
        
        // Update progress
        progress.style.width = `${newLeft}%`;
        
        // Calculate nearest planet
        const planetIndex = Math.round(newLeft / (100 / (slides.length - 1)));
        
        // Highlight active planet
        const planets = planetsContainer.querySelectorAll('.orbit-planet');
        planets.forEach((p, i) => {
            p.classList.toggle('active', i === planetIndex);
        });
        
        // Show the corresponding slide
        showSlide(planetIndex);
    });
    
    document.addEventListener('touchend', () => {
        if (isDragging) {
            isDragging = false;
            
            // Snap to nearest planet
            const currentLeft = parseFloat(spacecraft.style.left) || 0;
            const planetIndex = Math.round(currentLeft / (100 / (slides.length - 1)));
            const snapLeft = (planetIndex / (slides.length - 1)) * 100;
            
            // Animate to snap position
            spacecraft.style.transition = 'left 0.3s ease';
            spacecraft.style.left = `${snapLeft}%`;
            progress.style.width = `${snapLeft}%`;
            
            // Reset transition after animation
            setTimeout(() => {
                spacecraft.style.transition = '';
            }, 300);
        }
    });
    
    return orbitNav;
}

// ----- HOBBY SLIDER -----
function initializeHobbySlider() {
    const hobbySlider = document.querySelector('.hobby-slider');
    if (!hobbySlider) return;

    const slides = document.querySelectorAll('.hobby-slide');
    const totalSlides = slides.length;
    
    let currentSlide = 0; // Start with first slide
    
    // Show current slide, hide others
    function showSlide(index) {
        // Update current slide tracker
        currentSlide = index;
        
        // Hide all slides
        slides.forEach(slide => {
            slide.classList.remove('active');
            slide.style.opacity = 0;
            slide.style.transform = 'translateX(50px)';
        });
        
        // Show current slide
        slides[index].classList.add('active');
        
        // Animate it in
        setTimeout(() => {
            slides[index].style.opacity = 1;
            slides[index].style.transform = 'translateX(0)';
        }, 50);
        
        // Update orbit navigation
        updateOrbitNavigation(index);
    }
    
    // Create orbit navigation
    const orbitNav = createOrbitNavigation(hobbySlider, slides, currentSlide);
    
    // Update orbit navigation function
    function updateOrbitNavigation(index) {
        const planets = orbitNav.querySelectorAll('.orbit-planet');
        const progress = orbitNav.querySelector('.orbit-progress');
        const spacecraft = orbitNav.querySelector('.orbit-spacecraft');
        
        // Update active planet
        planets.forEach((planet, i) => {
            planet.classList.toggle('active', i === index);
        });
        
        // Update progress
        const progressPercent = (index / (totalSlides - 1)) * 100;
        progress.style.width = `${progressPercent}%`;
        
        // Update spacecraft position
        spacecraft.style.left = `${progressPercent}%`;
    }
    
    // Initialize the first slide
    showSlide(0);
}

// Initialize scroll animations with GSAP if available
function initializeScrollAnimations() {
    // Check if GSAP and ScrollTrigger are loaded
    if (typeof gsap === 'undefined' || typeof ScrollTrigger === 'undefined') return;
    
    // Register ScrollTrigger plugin
    gsap.registerPlugin(ScrollTrigger);
    
    // Animate section headers
    const sectionHeaders = document.querySelectorAll('.section-header');
    if (sectionHeaders.length) {
        sectionHeaders.forEach(header => {
            gsap.from(header.children, {
        y: 50,
        opacity: 0,
                duration: 1,
                stagger: 0.2,
                scrollTrigger: {
                    trigger: header,
                    start: "top 80%",
                    toggleActions: "play none none none"
            }
        });
    });
}

    // Animate skills cards if they exist
    const skillCards = document.querySelectorAll('.skill-card');
    if (skillCards.length) {
        gsap.from(skillCards, {
            scale: 0.8,
            opacity: 0,
            duration: 0.5,
            stagger: 0.1,
            scrollTrigger: {
                trigger: '.skills-grid',
                start: "top 75%",
                toggleActions: "play none none none"
            }
        });
    }
}

// Hobby Slider functionality with Orbit Navigation
document.addEventListener('DOMContentLoaded', function() {
  const slides = document.querySelectorAll('.hobby-slide');
  const orbitNavs = document.querySelectorAll('.orbit-nav');
  
  orbitNavs.forEach(nav => {
    nav.addEventListener('click', function() {
      const slideIndex = parseInt(this.getAttribute('data-slide'));
      
      // Remove active class from all slides and navigation buttons
      slides.forEach(slide => slide.classList.remove('active'));
      orbitNavs.forEach(nav => nav.classList.remove('active'));
      
      // Add active class to selected slide and navigation button
      slides[slideIndex].classList.add('active');
      this.classList.add('active');
    });
  });

  // Voeg een automatische rotatie effect toe voor een cooler uiterlijk
  let angle = 0;
  const orbitContainer = document.querySelector('.orbit-container');
  
  function rotateOrbit() {
    angle += 0.2;
    if (angle >= 360) angle = 0;
    
    orbitContainer.style.transform = `rotate(${angle}deg)`;
    
    // Laat de foto's rechtop staan terwijl de orbit draait
    orbitNavs.forEach(nav => {
      nav.style.transform = `rotate(-${angle}deg)`;
    });
    
    requestAnimationFrame(rotateOrbit);
  }
  
  // Verwijder deze regel als je de automatische rotatie niet wilt
  requestAnimationFrame(rotateOrbit);
});

// ----- ABOUT SECTION -----
    const aboutSection = safeSelect('#about');
    const navButtons = safeSelectAll('.nav-button');
    const contentSections = safeSelectAll('.content-section');
    
    if (aboutSection && navButtons.length) {
        // Intersection Observer for about section
        const aboutObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting && navButtons.length) {
                    // Animate nav buttons when about section is visible
                    navButtons.forEach((button, index) => {
                        if (typeof gsap !== 'undefined') {
                            gsap.fromTo(button, 
                                {
                                    opacity: 0,
                                    x: -20
                                },
                                {
                                    opacity: 1,
                                    x: 0,
                                    duration: 0.5,
                                    delay: index * 0.2,
                                    ease: "power2.out"
                                }
                            );
                        } else {
                            // Fallback if GSAP isn't loaded
                            button.style.opacity = 1;
                            button.style.transform = 'translateX(0)';
                        }
                    });
                }
            });
        }, { threshold: 0.3 });

        aboutObserver.observe(aboutSection);

        // Tab switching functionality
        navButtons.forEach(button => {
            button.addEventListener('click', () => {
                const targetSection = button.getAttribute('data-section');
                
                // Update active button
                navButtons.forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                
                // Switch content sections
                contentSections.forEach(section => {
                    section.classList.remove('active');
                    if (section.getAttribute('data-content') === targetSection) {
                        section.classList.add('active');
                    }
                });
            });
        });
        
        // Horizontal scrolling in about section
        let currentTabIndex = 0;
        let isInAboutSection = false;
        
        // Create an intersection observer to detect when we're in the about section
        const aboutScrollObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                isInAboutSection = entry.isIntersecting;
            });
        }, { threshold: 0.3 });
        
        aboutScrollObserver.observe(aboutSection);
        
        // Handle wheel events to scroll horizontally through tabs
        window.addEventListener('wheel', (e) => {
            if (isInAboutSection) {
                e.preventDefault();
                
                // Determine scroll direction
                const direction = e.deltaY > 0 ? 1 : -1;
                
                // Calculate new tab index
                const newTabIndex = Math.max(0, Math.min(navButtons.length - 1, currentTabIndex + direction));
                
                // Only process if we're changing tabs
                if (newTabIndex !== currentTabIndex) {
                    currentTabIndex = newTabIndex;
                    navButtons[currentTabIndex].click();
                }
                
                // If we're at the last tab and scrolling down, allow normal scrolling
                if (currentTabIndex === navButtons.length - 1 && direction > 0) {
                    isInAboutSection = false;
                    return true;
                }
                
                // If we're at the first tab and scrolling up, allow normal scrolling
                if (currentTabIndex === 0 && direction < 0) {
                    isInAboutSection = false;
                    return true;
                }
                
                return false;
            }
            
            return true;
        }, { passive: false });
    }
}
